esphome:
  name: "battery-management-data"
  # includes:
  # - arduino_port_expander.h

substitutions:
  updates: 10s
  name: solarstation-x

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
# logger:
#   level: DEBUG
#   logs:
#     binary_sensor.template: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "+E8jtiC5CsWlmz+1DzPBAeI2llpsnU/CZ+sKROUjGzk="

ota:
  password: "ceaa226a0f69370aa15d07794074a887"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Batter-Management"
    password: "uMMoiwbILe5j"

captive_portal:

mqtt:
  broker: "192.168.1.198"
  port: 1883

uart:
  id: mod_bus
  tx_pin: GPIO16
  rx_pin: GPIO17
  baud_rate: 115200
  stop_bits: 1

modbus:
  #flow_control_pin: 23
  send_wait_time: 200ms
  id: mod_bus_epever

text_sensor:
  - name: "rtc_clock"
    platform: modbus_controller
    modbus_controller_id: epever
    id: rtc_clock
    internal: true
    register_type: holding
    address: 0x9013
    register_count: 3
    raw_encode: HEXBYTES

modbus_controller:
  - id: epever
    ## the Modbus device addr
    address: 0x1
    modbus_id: mod_bus_epever
    command_throttle: 200ms
    setup_priority: -10
    update_interval: ${updates}

packages:
  tracer-rated-datum: !include tracer-rated-datum.yaml
  tracer-real-time: !include tracer-real-time.yaml
  tracer-stats: !include tracer-stats.yaml
  #tracer-settings: !include tracer-settings.yaml

sensor:
  - platform: pulse_counter
    pin: GPIO15
    unit_of_measurement: 'W'
    name: 'battery_output_power'
    update_interval: 20s
    internal_filter: 10us
    filters:
      - multiply: 60.0 # 0.06  # (60s/1000 pulses per kWh)

    total:
      unit_of_measurement: 'kWh'
      name: 'battery_total_out_power'
      accuracy_decimals: 3
      filters:
        - multiply: 0.001  # (1/1000 pulses per kWh)
  - platform: pulse_counter
    pin: GPIO5
    unit_of_measurement: 'W'
    name: 'home_all_power'
    update_interval: 20s
    internal_filter: 10us
    filters:
      - multiply: 60.0 # 0.06  # (60s/1000 pulses per kWh)

    total:
      unit_of_measurement: 'kWh'
      name: 'home_all_energy'
      accuracy_decimals: 3
      filters:
        - multiply: 0.001  # (1/1000 pulses per kWh)

  # Example source sensor
  - platform: adc
    pin: GPIO36
    id: adc_sensor_1
    attenuation: auto
    update_interval: 200ms
    internal: true
  - platform: adc
    pin: GPIO35
    id: adc_sensor_2
    attenuation: auto
    update_interval: 200ms
    internal: true
  - platform: adc
    pin: GPIO32
    id: adc_sensor_3
    attenuation: auto
    update_interval: 200ms
    internal: true
  - platform: adc
    pin: GPIO33
    id: adc_sensor_4
    attenuation: auto
    update_interval: 200ms
    internal: true

  - platform: ct_clamp
    sensor: adc_sensor_1
    name: "heat pump current"
    id: heat_pump_current_internal
    internal: true
    filters:
      - calibrate_linear:
          # Measured value of 0 maps to 0A
          - 0.02 -> 0
          # Known load: 4.0A
          # Value shown in logs: 0.1333A
          - 0.35 -> 7
  - platform: ct_clamp
    sensor: adc_sensor_2
    name: "Appliances load current"
    id: appliances_load_current_internal
    internal: true
    filters:
      - calibrate_linear:
          # Measured value of 0 maps to 0A
          - 0.02 -> 0
          # Known load: 4.0A
          # Value shown in logs: 0.1333A
          - 0.35 -> 7
  - platform: ct_clamp
    sensor: adc_sensor_3
    name: "Kitchen load current"
    id: kitchen_load_current_internal
    internal: true
    filters:
      - calibrate_linear:
          # Measured value of 0 maps to 0A
          - 0.02 -> 0
          # Known load: 4.0A
          # Value shown in logs: 0.1333A
          - 0.35 -> 7
  - platform: ct_clamp
    sensor: adc_sensor_4
    name: "Battery load current"
    id: battery_load_current_internal
    internal: true
    filters:
      - calibrate_linear:
          # Measured value of 0 maps to 0A
          - 0.02 -> 0
          # Known load: 4.0A
          # Value shown in logs: 0.1333A
          - 0.35 -> 7

  - platform: template
    name: "Heat Pump Current"
    id: heat_pump_current
    lambda: |-
      return id(heat_pump_current_internal).state;
    update_interval: 2s
    unit_of_measurement: "A"

  - platform: template
    name: "Appliances load current"
    id: appliances_load_current
    lambda: |-
      return id(appliances_load_current_internal).state;
    update_interval: 2s
    unit_of_measurement: "A"

  - platform: template
    name: "Kitchen load current"
    id: kitchen_load_current
    lambda: |-
      float current = id(kitchen_load_current_internal).state;
      return current;
    update_interval: 2s
    unit_of_measurement: "A"

  - platform: template
    name: "Battery load current"
    id: battery_load_current
    lambda: |-
      return id(battery_load_current_internal).state;
    update_interval: 2s
    unit_of_measurement: "A"

  - platform: template
    name: "Power Monitor Switch"
    id: power_monitor_switch
    lambda: |-
      float current_battery_load = id(battery_load_current_internal).state;
      float current_heat_pump = id(heat_pump_current_internal).state;
      float current_appliances = id(appliances_load_current_internal).state;

      if (current_battery_load > 12.3) {
        if (id(car_charging_switch).state) {
          id(car_charging_switch).turn_off();
          return false;
        } else {
          float available_capacity = 12.3 - current_battery_load;
          if (current_heat_pump < available_capacity && id(heat_pump_switch).state) {
            id(appliances_load).turn_off();
            return false;
          } else if (current_appliances < available_capacity && id(appliances_load).state) {
            id(heat_pump_switch).turn_off();
            return false;
          } else {
            id(appliances_load).turn_off();
            id(heat_pump_switch).turn_off();
            id(car_charging_switch).turn_off();
            return false;
          }
        }
      } else {
        if (id(inverter_switch).state) {
          if (current_heat_pump + current_appliances < 12.3) {
            id(heat_pump_switch).turn_on();
            id(appliances_load).turn_on();
          }

          if (current_appliances + current_heat_pump < 5) {
            id(car_charging_switch).turn_on();
          }

          return true;
        }
      }
      return false;
    update_interval: 300ms

interval:
  - interval: 400ms
    then:
      - lambda: |-
          id(heat_pump_current_internal).update();
          id(appliances_load_current_internal).update();
          id(kitchen_load_current_internal).update();
          id(battery_load_current_internal).update();

switch:
  - platform: gpio
    pin: GPIO22
    name: "inverter switch"
    id: inverter_switch
  - platform: gpio
    pin: GPIO1
    name: "appliances load"
    id: appliances_load
    inverted: true
  - platform: gpio
    pin: GPIO3
    name: "heat pump switch"
    id: heat_pump_switch
  - platform: gpio
    pin: GPIO21
    name: "car charging switch"
    id: car_charging_switch
